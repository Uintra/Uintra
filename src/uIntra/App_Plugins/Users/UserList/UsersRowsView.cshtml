@inherits Umbraco.Web.Mvc.UmbracoViewPage<Uintra.Users.UserList.MembersRowsViewModel>
@using System.Web.Mvc.Html
@using Uintra.Users.UserList
@using Uintra.Core.Extensions
@using Uintra.Users.Helpers
@using Compent.Extensions

@foreach (var member in Model.Members)
{
    <div data-profile="@member.ProfileUrl"
         data-group-id="@Model.GroupId.GetValueOrDefault()"
         data-id="@member.Member.Id"
         class="users-table__row js-user-list-row @if (Model.IsLastRequest)
                                                  {
                                                      <text>last</text>
                                                  }">
        @foreach (var column in Model.SelectedColumns)
        {
            switch (column.Type)
            {
                case ColumnType.Name:
                    {
                        <div class="users-table__cell users-table__cell--name">
                            <div class="users-table__info">
                                @Html.Action("Photo", "Member", new
                                {
                                    member = member.Member,
                                    cssModificator = "avatar--group-member",
                                    photoWidth = 30
                                })
                                <span class="users-table__name">@member.DisplayedName</span>
                            </div>
                        </div>
                    }
                    break;
                case ColumnType.Info:
                    {
                        <div class="users-table__cell users-table__cell--info">
                            @if (!member.Email.IsNullOrEmpty())
                            {
                                <span class="users-table__text"> @(Html.Localize("UserList.Table.Email.lbl") + ":")@member.Email</span>
                            }
                            @if (!member.Phone.IsNullOrEmpty())
                            {
                                <span class="users-table__text">@(Html.Localize("UserList.Table.Phone.lbl") + ":")@member.Phone</span>
                            }
                            @if (!member.Department.IsNullOrEmpty())
                            {
                                <span class="users-table__text">@(Html.Localize("UserList.Table.Department.lbl") + ":")@member.Department</span>
                            }
                        </div>
                    }
                    break;
                case ColumnType.Button:
                    {
                        <div class="users-table__cell users-table__cell--tools">
                            <button class="btn">
                                <svg class="svg-icon"
                                     viewBox="0 0 24 24"
                                     width="19px"
                                     height="19px">
                                    <use xlink:href="#icon-comment"
                                         x="0"
                                         y="0">
                                    </use>
                                </svg>
                                <span>Message</span>
                            </button>
                        </div>
                    }
                    break;
                case ColumnType.GroupManagement:
                    <div class="users-table__cell users-table__cell--btn">
                        @{
                            var role = member.IsGroupAdmin 
                                ? "UserList.Table.GroupAdmin.lbl" 
                                : "UserList.Table.GroupMember.lbl";

                            var canRenderToggleControl = UsersPresentationHelper.CanRenderToggleControl(Model, member);

                            if (canRenderToggleControl && !member.IsCreator)
                            {
                                <span class="fake-select">
                                    <select class="js-user-list-toggle-admin-rights">
                                        @if (member.IsGroupAdmin)
                                        {
                                            <option value="1" selected>@Html.Localize("UserList.Table.GroupAdmin.lbl")</option>
                                            <option value="0">@Html.Localize("UserList.Table.GroupMember.lbl")</option>
                                        }
                                        else
                                        {
                                            <option value="1">@Html.Localize("UserList.Table.GroupAdmin.lbl")</option>
                                            <option value="0" selected>@Html.Localize("UserList.Table.GroupMember.lbl")</option>
                                        }
                                    </select>
                                </span>
                            }
                            if (!canRenderToggleControl && !member.IsCreator && (member.IsGroupAdmin || !member.IsGroupAdmin))
                            {
                                <span class="users-table__text">@Html.Localize(role)</span>
                            }
                            if (member.IsCreator)
                            {
                                <span class="users-table__text">
                                    <svg class="svg-icon" viewBox="0 0 100 100"  width="20px" height="25px">
                                        <use xlink:href="#icon-admin" x="0" y="0"></use>
                                    </svg>
                                    @Html.Localize(role)
                                </span>
                            }
                        }

                    </div>
                    <div class="users-table__cell users-table__cell--btn">
                        @if (UsersPresentationHelper.CanRenderDeleteControl(Model, member))
                        {
                            <button class="users-table__delete js-user-list-delete">X</button>
                        }
                    </div>

                    break;
            }
        }
    </div>
}